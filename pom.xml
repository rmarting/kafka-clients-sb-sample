<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- Spring Boot Parent not longer needed
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.2.RELEASE</version>
		<relativePath />
	</parent>
	-->

	<groupId>com.rmarting.kafka</groupId>
	<artifactId>kafka-clients-sb-sample</artifactId>
	<version>3.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Quarkus only supports Java 11 -->
		<!--<java.version>8</java.version>-->
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>

		<!-- Kafka Clients -->
		<kafka-clients.version>2.5.0</kafka-clients.version>
		<!-- Swagger is provided by Quarkus -->
		<!--<springdoc-openapi-ui.version>1.4.3</springdoc-openapi-ui.version>-->
		<!-- Avro -->
		<avro.version>1.10.0</avro.version>
		<!-- Apicurio Registry -->
		<apicurio.version>1.3.1.Final</apicurio.version>
		<!--<apicurio.registry.url>http://localhost:8080/api</apicurio.registry.url>-->
		<apicurio.registry.url>http://service-registry.amq-streams-demo.apps-crc.testing/api</apicurio.registry.url>
		<!-- JKube -->
		<jkube.enricher.jkube-service.type>NodePort</jkube.enricher.jkube-service.type>
		<!-- Quarkus -->
		<quarkus.platform.version>1.13.7.Final</quarkus.platform.version>
	</properties>

	<!-- Quarkus BOM -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.quarkus</groupId>
				<artifactId>quarkus-universe-bom</artifactId>
				<version>${quarkus.platform.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Spring Boot not longer needed -->
		<!--
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		-->
		<!-- Quarkus Spring Extensions -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-spring-di</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-spring-boot-properties</artifactId>
		</dependency>

		<!-- Quarkus Health Check -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-health</artifactId>
		</dependency>

		<!-- Open API -->
		<!--
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>${springdoc-openapi-ui.version}</version>
		</dependency>
		-->
		<!-- Quarkus OpenAPI Extension -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-openapi</artifactId>
		</dependency>

		<!-- Spring Kafka not longer needed -->
		<!--
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		-->

		<!-- Kafka Clients and Reactive Messaging by Quarkus -->
		<!--
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-clients</artifactId>
			<version>${kafka-clients.version}</version>
		</dependency>
		-->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-kafka-client</artifactId>
		</dependency>
		<!-- Reactive Messaging -->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>
		</dependency>

		<!-- Avro Schemas Dependency by Quarkus (Experimental) -->
		<!--
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>${avro.version}</version>
		</dependency>
		-->
		<dependency>
			<groupId>io.quarkus</groupId>
			<artifactId>quarkus-avro</artifactId>
		</dependency>

		<!-- Apicurio Serializers/Deserializers -->
		<dependency>
			<groupId>io.apicurio</groupId>
			<artifactId>apicurio-registry-utils-serde</artifactId>
			<version>${apicurio.version}</version>
		</dependency>

		<!-- Test Dependencies -->
		<!-- Spring Boot not longer needed -->
		<!--
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		-->
		<!-- TODO Add testing -->
	</dependencies>

	<build>
		<finalName>kafka-clients-sb-sample</finalName>

		<plugins>
			<!-- Spring Boot not longer needed -->
			<!--
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			-->
			<plugin>
				<groupId>io.quarkus</groupId>
				<artifactId>quarkus-maven-plugin</artifactId>
				<version>${quarkus.platform.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>generate-code</goal>
							<goal>generate-code-tests</goal>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Avro Maven Plug-In to generate classes from schemas (files *.avsc) -->
			<plugin>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-maven-plugin</artifactId>
				<version>${avro.version}</version>
				<executions>
					<execution>
						<!-- Generate Java Classes in generate-sources maven phase -->
						<phase>generate-sources</phase>
						<goals>
							<goal>schema</goal>
						</goals>
						<configuration>
							<!-- Source Folder with Avro Schemas -->
							<sourceDirectory>${project.basedir}/src/main/resources/schemas</sourceDirectory>
							<includes>
								<!-- Avro Schemas extension file pattern -->
								<include>**/*.avsc</include>
							</includes>
							<outputDirectory>${project.build.directory}/generated-sources/schemas</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Extending source resources to add generated classes by Avro -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<!-- Added the generated source folder as source path to compile classes -->
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<!-- Output folder defined in generate phase -->
								<source>${project.build.directory}/generated-sources/schemas</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>apicurio</id>
			<build>
				<plugins>
					<plugin>
						<groupId>io.apicurio</groupId>
						<artifactId>apicurio-registry-maven-plugin</artifactId>
						<version>${apicurio.version}</version>
						<executions>
							<execution>
								<phase>generate-sources</phase>
								<goals>
									<goal>register</goal>
								</goals>
								<configuration>
									<registryUrl>${apicurio.registry.url}</registryUrl>
									<artifactType>AVRO</artifactType>
									<artifacts>
										<!-- Schema definition for SimpleTopicIdStrategy strategy -->
										<messages>${project.basedir}/src/main/resources/schemas/message.avsc</messages>
										<!-- Schema definition for TopicIdStrategy strategy -->
										<messages-value>${project.basedir}/src/main/resources/schemas/message.avsc</messages-value>
										<!-- Schema definition for RecordIdStrategy strategy -->
										<com.rmarting.kafka.schema.avro.Message>${project.basedir}/src/main/resources/schemas/message.avsc</com.rmarting.kafka.schema.avro.Message>
										<!-- Schema definition for TopicRecordIdStrategystrategy -->
										<messages-com.rmarting.kafka.schema.avro.Message>${project.basedir}/src/main/resources/schemas/message.avsc</messages-com.rmarting.kafka.schema.avro.Message>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>openshift</id>

			<build>
				<plugins>
					<plugin>
						<groupId>org.eclipse.jkube</groupId>
						<artifactId>openshift-maven-plugin</artifactId>
						<version>1.3.0</version>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>kubernetes</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.eclipse.jkube</groupId>
						<artifactId>kubernetes-maven-plugin</artifactId>
						<version>1.3.0</version>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Quarkus Native building profile -->
		<profile>
			<id>native</id>
			<activation>
				<property>
					<name>native</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>3.0.0-M5</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<systemPropertyVariables>
										<native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
										<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
										<!--<maven.home>${maven.home}</maven.home>-->
									</systemPropertyVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<properties>
				<quarkus.package.type>native</quarkus.package.type>
			</properties>
		</profile>
	</profiles>
</project>
